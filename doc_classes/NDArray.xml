<?xml version="1.0" encoding="UTF-8" ?>
<class name="NDArray" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		A NumDot tensor object.
	</brief_description>
	<description>
		A NumDot tensor object.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="as_type" qualifiers="const">
			<return type="NDArray" />
			<param index="0" name="type" type="int" enum="nd.DType" />
			<description>
				Convert to an array of the given type, but avoid copying data if possible.
			</description>
		</method>
		<method name="assign_abs">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.abs].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_acos">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.acos].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_acosh">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.acosh].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_add">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.add].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_all">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.all].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_angle">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.angle].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_any">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.any].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_asin">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.asin].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_asinh">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.asinh].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_atan">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.atan].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_atan2">
			<return type="NDArray" />
			<param index="0" name="x1" type="Variant" />
			<param index="1" name="x2" type="Variant" />
			<description>
				In-place version of [method nd.atan2].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_atanh">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.atanh].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_bitwise_and">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.bitwise_and].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_bitwise_left_shift">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.bitwise_left_shift].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_bitwise_not">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.bitwise_not].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_bitwise_or">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.bitwise_or].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_bitwise_right_shift">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.bitwise_right_shift].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_bitwise_xor">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.bitwise_xor].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_ceil">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.ceil].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_clip">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="min" type="Variant" />
			<param index="2" name="max" type="Variant" />
			<description>
				In-place version of [method nd.clip].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_conjugate">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.conjugate].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_convolve">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<param index="1" name="kernel" type="Variant" />
			<description>
				In-place version of [method nd.convolve].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_cos">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.cos].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_cosh">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.cosh].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_cross">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<param index="2" name="axisa" type="int" default="-1" />
			<param index="3" name="axisb" type="int" default="-1" />
			<param index="4" name="axisc" type="int" default="-1" />
			<description>
				In-place version of [method nd.cross].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_deg2rad">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.deg2rad].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_divide">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.divide].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_dot">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.dot].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_equal">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.equal].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_exp">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.exp].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_floor">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.floor].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_greater">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.greater].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_greater_equal">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.greater_equal].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_less">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.less].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_less_equal">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.less_equal].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_log">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.log].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_logical_and">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.logical_and].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_logical_not">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.logical_not].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_logical_or">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.logical_or].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_logical_xor">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.logical_xor].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_matmul">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.matmul].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_max">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.max].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_maximum">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.maximum].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_mean">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.mean].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_min">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.min].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_minimum">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.minimum].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_multiply">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.multiply].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_negative">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.negative].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_norm">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="ord" type="Variant" default="2" />
			<param index="2" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.norm].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_not_equal">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.not_equal].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_positive">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.positive].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_pow">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.pow].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_prod">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.prod].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_rad2deg">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.rad2deg].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_reduce_dot">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<param index="2" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.sum_product].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_remainder">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.remainder].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_rint">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.rint].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_round">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.round].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_sign">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.sign].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_sin">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.sin].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_sinh">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.sinh].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_sqrt">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.sqrt].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_square">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.square].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_std">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.std].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_subtract">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of [method nd.subtract].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_sum">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.sum].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_tan">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.tan].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_tanh">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.tanh].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_trunc">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of [method nd.trunc].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_var">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of [method nd.var].
				Assigns the result to this array, and returns it. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="buffer_dtype" qualifiers="const">
			<return type="int" />
			<description>
				Returns the natural dtype of the underlying buffer.
			</description>
		</method>
		<method name="buffer_size" qualifiers="const">
			<return type="int" />
			<description>
				Returns the natural number of elements in the underlying buffer.
			</description>
		</method>
		<method name="buffer_size_in_bytes" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of bytes used by the underlying buffer.
				This is equivalent to [code]nd.size_of_dtype_in_bytes(x.buffer_dtype()) * x.buffer_size()[/code].
			</description>
		</method>
		<method name="copy" qualifiers="const">
			<return type="NDArray" />
			<description>
				Creates a copy of this array.
			</description>
		</method>
		<method name="dtype" qualifiers="const">
			<return type="int" enum="nd.DType" />
			<description>
				Data-type of the array’s elements.
			</description>
		</method>
		<method name="flatten" qualifiers="const">
			<return type="NDArray" />
			<description>
				Return a copy of the array collapsed into one dimension.
			</description>
		</method>
		<method name="get" qualifiers="const vararg">
			<return type="NDArray" />
			<description>
				Indexes into the array, and return the resulting tensor.
				If the index is a single boolean array, it is treated as a mask.
				If the index is a single integer array, it is treated as an index list.
			</description>
		</method>
		<method name="get_basis" qualifiers="const vararg">
			<return type="Basis" />
			<description>
				Indexes into the array, and return the resulting tensor as a Basis, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="get_bool" qualifiers="const vararg">
			<return type="bool" />
			<description>
				Indexes into the array, and return the resulting value as bool.
				Errors if the index does not yield a single value.
			</description>
		</method>
		<method name="get_color" qualifiers="const vararg">
			<return type="Color" />
			<description>
				Indexes into the array, and return the resulting tensor as a Color, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="get_float" qualifiers="const vararg">
			<return type="float" />
			<description>
				Indexes into the array, and return the resulting value as float.
				Errors if the index does not yield a single value.
			</description>
		</method>
		<method name="get_int" qualifiers="const vararg">
			<return type="int" />
			<description>
				Indexes into the array, and return the resulting value as int.
				Errors if the index does not yield a single value.
			</description>
		</method>
		<method name="get_plane" qualifiers="const vararg">
			<return type="Plane" />
			<description>
				Indexes into the array, and return the resulting tensor as a Plane, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="get_projection" qualifiers="const vararg">
			<return type="Projection" />
			<description>
				Indexes into the array, and return the resulting tensor as a Projection, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="get_quaternion" qualifiers="const vararg">
			<return type="Quaternion" />
			<description>
				Indexes into the array, and return the resulting tensor as a Quaternion, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="get_vector2" qualifiers="const vararg">
			<return type="Vector2" />
			<description>
				Indexes into the array, and return the resulting tensor as a Vector2, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="get_vector2i" qualifiers="const vararg">
			<return type="Vector2i" />
			<description>
				Indexes into the array, and return the resulting tensor as a Vector2i, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="get_vector3" qualifiers="const vararg">
			<return type="Vector3" />
			<description>
				Indexes into the array, and return the resulting tensor as a Vector3, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="get_vector3i" qualifiers="const vararg">
			<return type="Vector3i" />
			<description>
				Indexes into the array, and return the resulting tensor as a Vector3i, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="get_vector4" qualifiers="const vararg">
			<return type="Vector4" />
			<description>
				Indexes into the array, and return the resulting tensor as a Vector4, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="get_vector4i" qualifiers="const vararg">
			<return type="Vector4i" />
			<description>
				Indexes into the array, and return the resulting tensor as a Vector4i, if the shape is compatible.
				See [method get] for documentation of slicing.
			</description>
		</method>
		<method name="ndim" qualifiers="const">
			<return type="int" />
			<description>
				Number of array dimensions.
			</description>
		</method>
		<method name="set" qualifiers="const vararg">
			<return type="void" />
			<param index="0" name="value" type="Variant" />
			<description>
				Indexes into the array, sets the element to the given value.
				The first value is the value to be set, all following values are indexes into the array.
				If the index is a single boolean array, it is treated as a mask.
				If the index is a single integer array, it is treated as an index list.
			</description>
		</method>
		<method name="shape" qualifiers="const">
			<return type="PackedInt64Array" />
			<description>
				Array of array dimensions.
			</description>
		</method>
		<method name="size" qualifiers="const">
			<return type="int" />
			<description>
				Number of elements in the array. Equal to nd.prod(a.shape()), i.e., the product of the array’s dimensions.
			</description>
		</method>
		<method name="squeeze" qualifiers="const">
			<return type="NDArray" />
			<description>
				Remove axes of length one from a copy of this array.
			</description>
		</method>
		<method name="strides" qualifiers="const">
			<return type="PackedInt64Array" />
			<description>
				The strides of each dimension, in order, in the underlying data buffer.
			</description>
		</method>
		<method name="strides_layout" qualifiers="const">
			<return type="int" enum="NDArray.Layout" />
			<description>
				The layout of the strides into the underlying data buffer.
				Arrays with RowMajor and ColumnMajor layout may have improved performance to those with dynamic layout.
				All arrays start with RowMajor layout, but rearranging (like [method nd.transpose]) can change the layout. To regain a consistent layout, consider making a copy of the array.
			</description>
		</method>
		<method name="strides_offset" qualifiers="const">
			<return type="int" />
			<description>
				The offset of the first element in this array in the underlying data buffer.
			</description>
		</method>
		<method name="to_basis" qualifiers="const">
			<return type="Basis" />
			<description>
				If shape is [lb]3, 3[rb], converts this tensor to a Basis.
			</description>
		</method>
		<method name="to_bool" qualifiers="const">
			<return type="bool" />
			<description>
				Convert this tensor to a single bool.
				Errors if size() is not 1.
			</description>
		</method>
		<method name="to_color" qualifiers="const">
			<return type="Color" />
			<description>
				If shape is [lb]4[rb], converts this tensor to a Color.
			</description>
		</method>
		<method name="to_float" qualifiers="const">
			<return type="float" />
			<description>
				Convert this tensor to a single float.
				Errors if size() is not 1.
			</description>
		</method>
		<method name="to_godot_array" qualifiers="const">
			<return type="NDArray[]" />
			<description>
				Convert this tensor to a Godot array. For now, the resulting array is flat.
			</description>
		</method>
		<method name="to_int" qualifiers="const">
			<return type="int" />
			<description>
				Convert this tensor to a single int.
				Errors if size() is not 1.
			</description>
		</method>
		<method name="to_packed_byte_array" qualifiers="const">
			<return type="PackedByteArray" />
			<description>
				If 1D, converts this tensor to a PackedByteArray.
				If the backing array is PackedByteArray, it will produce an instantaneous copy-on-write copy.
			</description>
		</method>
		<method name="to_packed_color_array" qualifiers="const">
			<return type="PackedColorArray" />
			<description>
				If shape is [lb]?, 4[rb], converts this tensor to a PackedColorArray.
				If the backing array is PackedColorArray, it will produce an instantaneous copy-on-write copy.
			</description>
		</method>
		<method name="to_packed_float32_array" qualifiers="const">
			<return type="PackedFloat32Array" />
			<description>
				If 1D, converts this tensor to a PackedFloat32Array.
				If the backing array is PackedFloat32Array, it will produce an instantaneous copy-on-write copy.
			</description>
		</method>
		<method name="to_packed_float64_array" qualifiers="const">
			<return type="PackedFloat64Array" />
			<description>
				If 1D, converts this tensor to a PackedFloat64Array.
				If the backing array is PackedFloat64Array, it will produce an instantaneous copy-on-write copy.
			</description>
		</method>
		<method name="to_packed_int32_array" qualifiers="const">
			<return type="PackedInt32Array" />
			<description>
				If 1D, converts this tensor to a PackedInt32Array.
				If the backing array is PackedInt32Array, it will produce an instantaneous copy-on-write copy.
			</description>
		</method>
		<method name="to_packed_int64_array" qualifiers="const">
			<return type="PackedInt64Array" />
			<description>
				If 1D, converts this tensor to a PackedInt64Array.
				If the backing array is PackedInt64Array, it will produce an instantaneous copy-on-write copy.
			</description>
		</method>
		<method name="to_packed_vector2_array" qualifiers="const">
			<return type="PackedVector2Array" />
			<description>
				If shape is [lb]?, 2[rb], converts this tensor to a PackedVector2Array.
				If the backing array is PackedVector2Array, it will produce an instantaneous copy-on-write copy.
			</description>
		</method>
		<method name="to_packed_vector3_array" qualifiers="const">
			<return type="PackedVector3Array" />
			<description>
				If shape is [lb]?, 3[rb], converts this tensor to a PackedVector3Array.
				If the backing array is PackedVector3Array, it will produce an instantaneous copy-on-write copy.
			</description>
		</method>
		<method name="to_packed_vector4_array" qualifiers="const">
			<return type="PackedVector4Array" />
			<description>
				If shape is [lb]?, 4[rb], converts this tensor to a PackedVector4Array.
				If the backing array is PackedVector4Array, it will produce an instantaneous copy-on-write copy.
			</description>
		</method>
		<method name="to_plane" qualifiers="const">
			<return type="Plane" />
			<description>
				If shape is [lb]4[rb], converts this tensor to a Plane.
			</description>
		</method>
		<method name="to_projection" qualifiers="const">
			<return type="Projection" />
			<description>
				If shape is [lb]4, 4[rb], converts this tensor to a Projection.
			</description>
		</method>
		<method name="to_quaternion" qualifiers="const">
			<return type="Quaternion" />
			<description>
				If shape is [lb]4[rb], converts this tensor to a Quaternion.
			</description>
		</method>
		<method name="to_vector2" qualifiers="const">
			<return type="Vector2" />
			<description>
				If shape is [lb]2[rb], converts this tensor to a Vector2.
			</description>
		</method>
		<method name="to_vector2i" qualifiers="const">
			<return type="Vector2i" />
			<description>
				If shape is [lb]2[rb], converts this tensor to a Vector2i.
			</description>
		</method>
		<method name="to_vector3" qualifiers="const">
			<return type="Vector3" />
			<description>
				If shape is [lb]3[rb], converts this tensor to a Vector3.
			</description>
		</method>
		<method name="to_vector3i" qualifiers="const">
			<return type="Vector3i" />
			<description>
				If shape is [lb]3[rb], converts this tensor to a Vector3i.
			</description>
		</method>
		<method name="to_vector4" qualifiers="const">
			<return type="Vector4" />
			<description>
				If shape is [lb]4[rb], converts this tensor to a Vector4.
			</description>
		</method>
		<method name="to_vector4i" qualifiers="const">
			<return type="Vector4i" />
			<description>
				If shape is [lb]4[rb], converts this tensor to a Vector4.
			</description>
		</method>
		<method name="transpose" qualifiers="const vararg">
			<return type="NDArray" />
			<description>
				Returns a view of the array with axes transposed.
				Refer to [method nd.transpose] for full documentation.
				Axes can be passed without creating an array, e.g. [code]array.transpose(3, 1, 2)[/code].
			</description>
		</method>
	</methods>
	<constants>
		<constant name="RowMajor" value="0" enum="Layout">
			The array's strides increase consistently from the inner to the outer dimensions.
		</constant>
		<constant name="ColumnMajor" value="1" enum="Layout">
			The array's strides increase consistently from the outer to the inner dimensions.
		</constant>
		<constant name="Dynamic" value="2" enum="Layout">
			The array's strides are inconsistent in order.
		</constant>
		<constant name="Any" value="3" enum="Layout">
			Compatible with both row major and column major, i.e. 0D and 1D arrays.
		</constant>
	</constants>
</class>
