<?xml version="1.0" encoding="UTF-8" ?>
<class name="nd" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Contains NumDot functions returning tensors.
	</brief_description>
	<description>
		The base namespace for NumDot functions.
		All mathematical functions in this namespace return tensors. For reduction results further used in scalar computation, consider using [ndb], [ndf] and [ndi] instead.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="abs" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Calculate the absolute value element-wise.
			</description>
		</method>
		<method name="acos" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Trigonometric inverse cosine, element-wise.
				The inverse of cos so that, if y = cos(x), then x = arccos(y).
			</description>
		</method>
		<method name="acosh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Inverse hyperbolic cosine, element-wise.
			</description>
		</method>
		<method name="add" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Add arguments element-wise.
			</description>
		</method>
		<method name="all" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Test whether all array elements along a given axis evaluate to True.
				Returns a 0-dimension boolean if axes is null. In that case, [method ndb.all] is preferred.
			</description>
		</method>
		<method name="angle" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<description>
				Return the angle of the complex argument.
				This is equivalent to [code]nd.atan2(nd.imag(x), nd.real(x))[/code].
			</description>
		</method>
		<method name="any" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Test whether any array element along a given axis evaluates to True.
				Returns a 0-dimension boolean if axes is null. In that case, [method ndb.any] is preferred.
			</description>
		</method>
		<method name="arange" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="start_or_stop" type="Variant" />
			<param index="1" name="stop" type="Variant" default="null" />
			<param index="2" name="step" type="Variant" default="1" />
			<param index="3" name="dtype" type="int" enum="nd.DType" default="13" />
			<description>
				Return evenly spaced values within a given interval.
			</description>
		</method>
		<method name="array" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="13" />
			<description>
				Create a new [NDArray] of the given DType from the given data.
				If the input is an [NDArray], it will be copied.
			</description>
		</method>
		<method name="as_array" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="13" />
			<description>
				Convert the input to an array, but avoid copying data if possible.
			</description>
		</method>
		<method name="asin" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Inverse sine, element-wise.
				The inverse of sine, so that if y = sin(x) then x = arcsin(y).
			</description>
		</method>
		<method name="asinh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Inverse hyperbolic sine element-wise.
			</description>
		</method>
		<method name="atan" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Trigonometric inverse tangent, element-wise.
				The inverse of tan, so that if y = tan(x) then x = arctan(y).
			</description>
		</method>
		<method name="atan2" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="x1" type="Variant" />
			<param index="1" name="x2" type="Variant" />
			<description>
				Element-wise arc tangent of x1/x2 choosing the quadrant correctly.
				The quadrant (i.e., branch) is chosen so that arctan2(x1, x2) is the signed angle in radians between the ray ending at the origin and passing through the point (1,0), and the ray ending at the origin and passing through the point (x2, x1). (Note the role reversal: the “y-coordinate” is the first function parameter, the “x-coordinate” is the second.) By IEEE convention, this function is defined for x2 = +/-0 and for either or both of x1 and x2 = +/-inf.
			</description>
		</method>
		<method name="atanh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Inverse hyperbolic tangent element-wise.
			</description>
		</method>
		<method name="bitwise_and" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Compute the bit-wise AND of two arrays element-wise.
			</description>
		</method>
		<method name="bitwise_left_shift" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Shift the bits of an integer to the left.
			</description>
		</method>
		<method name="bitwise_not" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Compute bit-wise inversion, or bit-wise NOT, element-wise.
			</description>
		</method>
		<method name="bitwise_or" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Compute the bit-wise OR of two arrays element-wise.
			</description>
		</method>
		<method name="bitwise_right_shift" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Shift the bits of an integer to the right.
			</description>
		</method>
		<method name="bitwise_xor" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Compute the bit-wise XOR of two arrays element-wise.
			</description>
		</method>
		<method name="bool_" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to a bool dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.Bool)[/code].
			</description>
		</method>
		<method name="ceil" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Return the ceiling of the input, element-wise.
				The ceil of the scalar x is the smallest integer i, such that i &gt;= x.
			</description>
		</method>
		<method name="clip" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="min" type="Variant" />
			<param index="2" name="max" type="Variant" />
			<description>
				Clip (limit) the values in an array.
				Given an interval, values outside the interval are clipped to the interval edges. For example, if an interval of [lb]0, 1[rb] is specified, values smaller than 0 become 0, and values larger than 1 become 1.
				Equivalent to but faster than nd.minimum(a_max, nd.maximum(a, a_min)).
				No check is performed to ensure a_min &lt; a_max.
			</description>
		</method>
		<method name="complex64" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to a complex64 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.Complex64)[/code].
			</description>
		</method>
		<method name="complex128" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to a complex128 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.Complex128)[/code].
			</description>
		</method>
		<method name="complex_as_vector" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<description>
				Reinterprets elements in a complex-typed array as a 2-D vector.
				The new dimension is added in the back.
			</description>
		</method>
		<method name="concatenate" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="axis" type="int" default="0" />
			<param index="2" name="dtype" type="int" enum="nd.DType" default="13" />
			<description>
				Join a sequence of arrays along an existing axis.
				The arrays must match in dimension except in the axis.
			</description>
		</method>
		<method name="conjugate" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<description>
				Return the complex conjugate, element-wise.
				The complex conjugate of a complex number is obtained by changing the sign of its imaginary part.
			</description>
		</method>
		<method name="convolve" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<param index="1" name="kernel" type="Variant" />
			<description>
				Convolve two N-dimensional arrays. They are broadcasted against each other in the inner dimensions.
				Currently, kernel must be smaller than array in all dimensions.
			</description>
		</method>
		<method name="copy" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Creates a copy of the given array.
			</description>
		</method>
		<method name="cos" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Cosine element-wise.
			</description>
		</method>
		<method name="cosh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Hyperbolic cosine, element-wise.
				Equivalent to 0.5 * (nd.exp(x) + nd.exp(-x)).
			</description>
		</method>
		<method name="count_nonzero" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Counts the number of non-zero values in the array a along the given axes.
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndi.count_nonzero].
			</description>
		</method>
		<method name="cross" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<param index="2" name="axisa" type="int" default="-1" />
			<param index="3" name="axisb" type="int" default="-1" />
			<param index="4" name="axisc" type="int" default="-1" />
			<description>
				Return the cross product of two (arrays of) vectors.
				The cross product of a and b in R3 is a vector perpendicular to both a and b. If a and b are arrays of vectors, the vectors are defined by the last axis of a and b by default, and these axes can have dimensions 2 or 3. Where the dimension of either a or b is 2, the third component of the input vector is assumed to be zero and the cross product calculated accordingly. In cases where both input vectors have dimension 2, the z-component of the cross product is returned.
			</description>
		</method>
		<method name="default_rng" qualifiers="static">
			<return type="NDRandomGenerator" />
			<param index="0" name="seed" type="Variant" default="null" />
			<description>
				Creates a new random number generator (rng) with the default random engine (mt19937).
				If no seed is provided, a fresh, unpredictable entropy will be pulled from the OS.
			</description>
		</method>
		<method name="deg2rad" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Convert angles from degrees to radians.
			</description>
		</method>
		<method name="diag" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="offset" type="int" default="0" />
			<description>
				This function does one of two things, depending on the dimension of the input array:
				1-D: Constructs a square matrix from a k-th diagonal, with all other positions being 0.
				2-D: Returns a view of the k-th diagonal, like [method diagonal].
			</description>
		</method>
		<method name="diagonal" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="offset" type="int" default="0" />
			<param index="2" name="axis1" type="int" default="0" />
			<param index="3" name="axis2" type="int" default="1" />
			<description>
				Return specified matrix diagonals. This is a view of the given array.
				If the array has more than 2 dimensions, the given dimensions are removed, and the new dimension is inserted as the new last (innermost) dimension.
			</description>
		</method>
		<method name="divide" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Divide arguments element-wise.
			</description>
		</method>
		<method name="dot" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Dot product of two arrays. Specifically,

				If either a or b is 0-D (scalar), it is equivalent to multiply, but using [method multiply] or a * b is preferred.
				If both a and b are 2-D or less, but not 0-D, it is equal to [method matmul], and using it is preferred.
				Otherwise, it would be equivalent to tensordot, but currently fails.
			</description>
		</method>
		<method name="dumpb" qualifiers="static">
			<return type="PackedByteArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Save an array to a buffer in NumPy .npy format.
				See [method load] to load an array in the same format.
			</description>
		</method>
		<method name="e" qualifiers="static">
			<return type="float" />
			<description>
				Euler’s constant, base of natural logarithms, Napier’s constant.
			</description>
		</method>
		<method name="ellipsis" qualifiers="static">
			<return type="StringName" />
			<description>
				An alias for the StringName &amp;"...". In a subscript, this will stand in for omitted dimensions, for example if you want to index the last dimension.
			</description>
		</method>
		<method name="empty" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="shape" type="Variant" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="2" />
			<description>
				Return a new array of given shape and type, without initializing entries.
			</description>
		</method>
		<method name="empty_like" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="model" type="Variant" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="13" />
			<param index="2" name="shape" type="Variant" default="null" />
			<description>
				Return a new array with the same shape and type as a given array.
				DType and shape will, if supplied, override the values inferred from the given array.
			</description>
		</method>
		<method name="equal" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 == x2) element-wise.
			</description>
		</method>
		<method name="euler_gamma" qualifiers="static">
			<return type="float" />
			<description>
				Euler-Mascheroni constant.
			</description>
		</method>
		<method name="exp" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Calculate the exponential of all elements in the input array.
			</description>
		</method>
		<method name="eye" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="shape" type="Variant" />
			<param index="1" name="k" type="int" default="0" />
			<param index="2" name="dtype" type="int" enum="nd.DType" default="2" />
			<description>
				Return a tensor with ones on the diagonal, and 0 elsewhere. The shape depends on the first parameter:
				If an int N is given, an NxN matrix is returned.
				Otherwise, the first parameter is interpreted as a shape.
				k is the index of the diagonal: 0 (the default) refers to the main diagonal, a positive value refers to an upper diagonal, and a negative value to a lower diagonal.
			</description>
		</method>
		<method name="fft" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="axis" type="int" default="-1" />
			<description>
				Compute the one-dimensional discrete Fourier Transform.
			</description>
		</method>
		<method name="fft_freq" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="n" type="int" />
			<param index="1" name="d" type="float" default="1" />
			<description>
				Return the Discrete Fourier Transform sample frequencies.
				The returned float array f contains the frequency bin centers in cycles per unit of the sample spacing (with zero at the start). For instance, if the sample spacing is in seconds, then the frequency unit is cycles/second.
				Given a window length n and a sample spacing d:
				[code]f = [0, 1, ...,   n/2-1,     -n/2, ..., -1] / (d*n)   if n is even[/code]
				[code]f = [0, 1, ..., (n-1)/2, -(n-1)/2, ..., -1] / (d*n)   if n is odd[/code]
			</description>
		</method>
		<method name="flip" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="axis" type="int" />
			<description>
				Reverse the order of elements in an array along the given axis.
				The shape of the array is preserved, but the elements are reordered.
			</description>
		</method>
		<method name="float32" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to a float32 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.Float32)[/code].
			</description>
		</method>
		<method name="float64" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to a float64 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.Float64)[/code].
			</description>
		</method>
		<method name="floor" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Return the floor of the input, element-wise.
				The floor of the scalar x is the largest integer i, such that i &lt;= x.
			</description>
		</method>
		<method name="from" qualifiers="static">
			<return type="Vector4i" />
			<param index="0" name="start" type="int" />
			<description>
				Create a range that starts at the given index.
			</description>
		</method>
		<method name="full" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="shape" type="Variant" />
			<param index="1" name="fill_value" type="Variant" />
			<param index="2" name="dtype" type="int" enum="nd.DType" default="2" />
			<description>
				Return a new array of given shape and type, filled with fill_value.
			</description>
		</method>
		<method name="full_like" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="model" type="Variant" />
			<param index="1" name="fill_value" type="Variant" />
			<param index="2" name="dtype" type="int" enum="nd.DType" default="13" />
			<param index="3" name="shape" type="Variant" default="null" />
			<description>
				Return a new array with the same shape and type as a given array, filled with the given value.
				DType and shape will, if supplied, override the values inferred from the given array.
			</description>
		</method>
		<method name="greater" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 &gt; x2) element-wise.
			</description>
		</method>
		<method name="greater_equal" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 &gt;= x2) element-wise.
			</description>
		</method>
		<method name="hsplit" qualifiers="static">
			<return type="NDArray[]" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="indices_or_section_size" type="Variant" />
			<description>
				Split an array into multiple sub-arrays horizontally (column-wise).
				Please refer to [method split]. hsplit is equivalent to [method split] with axis=1, the array is always split along the second axis except for 1-D arrays, where it is split at axis=0.
			</description>
		</method>
		<method name="hstack" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="13" />
			<description>
				Stack arrays in sequence horizontally (column wise).
				This is equivalent to concatenation along the second axis, except for 1-D arrays where it concatenates along the first axis. Rebuilds arrays divided by hsplit.
				This function makes most sense for arrays with up to 3 dimensions. For instance, for pixel-data with a height (first axis), width (second axis), and r/g/b channels (third axis). The functions concatenate, stack and block provide more general stacking and concatenation operations.
			</description>
		</method>
		<method name="imag" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<description>
				Return the imaginary part of the complex argument.
				If the argument is not complex, returns a non-writeable array.
			</description>
		</method>
		<method name="inf" qualifiers="static">
			<return type="float" />
			<description>
				IEEE 754 floating point representation of (positive) infinity.
			</description>
		</method>
		<method name="inner" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Inner product of two arrays.
				Ordinary inner product of vectors for 1-D arrays (without complex conjugation), in higher dimensions a sum product over the last axes.
			</description>
		</method>
		<method name="int8" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to an int8 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.Int8)[/code].
			</description>
		</method>
		<method name="int16" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to an int16 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.Int16)[/code].
			</description>
		</method>
		<method name="int32" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to an int32 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.Int32)[/code].
			</description>
		</method>
		<method name="int64" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to an int64 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.Int64)[/code].
			</description>
		</method>
		<method name="is_close" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<param index="2" name="rtol" type="float" default="1e-05" />
			<param index="3" name="atol" type="float" default="1e-08" />
			<param index="4" name="equal_nan" type="bool" default="false" />
			<description>
				Returns a boolean array where two arrays are element-wise equal within a tolerance.
				The tolerance values are positive, typically very small numbers. The relative difference (rtol * abs(b)) and the absolute difference atol are added together to compare against the absolute difference between a and b.
			</description>
		</method>
		<method name="is_finite" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Test element-wise for finiteness (not infinity and not Not a Number).
				The result is returned as a boolean array.
			</description>
		</method>
		<method name="is_inf" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Test element-wise for positive or negative infinity.
				Returns a boolean array of the same shape as x, True where x == +/-inf, otherwise False.
			</description>
		</method>
		<method name="is_nan" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Test element-wise for NaN and return result as a boolean array.
			</description>
		</method>
		<method name="less" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 &lt; x2) element-wise.
			</description>
		</method>
		<method name="less_equal" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 &lt;= x2) element-wise.
			</description>
		</method>
		<method name="linspace" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="start" type="Variant" />
			<param index="1" name="stop" type="Variant" />
			<param index="2" name="num" type="int" default="50" />
			<param index="3" name="endpoint" type="bool" default="true" />
			<param index="4" name="dtype" type="int" enum="nd.DType" default="13" />
			<description>
				Return evenly spaced numbers over a specified interval.
				Returns num evenly spaced samples, calculated over the interval [lb]start, stop[rb].
				The endpoint of the interval can optionally be excluded.
			</description>
		</method>
		<method name="load" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="file_or_buffer" type="Variant" />
			<description>
				Load arrays in npy format.
				Supports [code]FileAccess[/code], [code]PackedByteArray[/code] and [code]String[/code] path parameters.
				See [method dumpb] to write an array to the same format.
			</description>
		</method>
		<method name="log" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Natural logarithm, element-wise.
				The natural logarithm log is the inverse of the exponential function, so that log(exp(x)) = x. The natural logarithm is logarithm in base e.
			</description>
		</method>
		<method name="logical_and" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Compute the truth value of x1 AND x2 element-wise.
			</description>
		</method>
		<method name="logical_not" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Compute the truth value of NOT x element-wise.
			</description>
		</method>
		<method name="logical_or" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Compute the truth value of x1 OR x2 element-wise.
			</description>
		</method>
		<method name="logical_xor" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Compute the truth value of x1 XOR x2 element-wise.
				Similar to [method not_equal], but converts all arguments to boolean before computation.
			</description>
		</method>
		<method name="matmul" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Matrix multiplication of two arrays.
				The behavior depends on the arguments in the following way:
					If either of the arguments is 0-D, the operation fails.
					If both arguments are 2-D they are multiplied like conventional matrices.
					If the first argument is 1-D, it is promoted to a matrix by prepending a 1 to its dimensions. After matrix multiplication the prepended 1 is removed.
					If the second argument is 1-D, it is promoted to a matrix by appending a 1 to its dimensions. After matrix multiplication the appended 1 is removed.
					If either argument is N-D, N &gt; 2, it is treated as a stack of matrices residing in the last two indexes and broadcast accordingly.
			</description>
		</method>
		<method name="max" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Return the maximum of an array or maximum along an axis.
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndf.max] or [method ndi.max].
			</description>
		</method>
		<method name="maximum" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Element-wise maximum of array elements.
				Compare two arrays and return a new array containing the element-wise maxima. If one of the elements being compared is a NaN, then that element is returned. If both elements are NaNs then the first is returned. The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
			</description>
		</method>
		<method name="mean" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Compute the arithmetic mean along the specified axis.
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndf.mean].
			</description>
		</method>
		<method name="median" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Compute the median along the specified axis. The median is the middle value when you sort the values.
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndf.median] or [method ndi.median].
			</description>
		</method>
		<method name="min" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Return the minimum of an array or minimum along an axis.
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndf.min] or [method ndi.min].
			</description>
		</method>
		<method name="minimum" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Element-wise minimum of array elements.
				                Compare two arrays and return a new array containing the element-wise minima. If one of the elements being compared is a NaN, then that element is returned. If both elements are NaNs then the first is returned. The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
			</description>
		</method>
		<method name="moveaxis" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="src" type="int" />
			<param index="2" name="dst" type="int" />
			<description>
				Move axes of an array to new positions.
				Other axes remain in their original order.
			</description>
		</method>
		<method name="multiply" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Multiply arguments element-wise.
			</description>
		</method>
		<method name="nan" qualifiers="static">
			<return type="float" />
			<description>
				IEEE 754 floating point representation of Not a Number (NaN).
			</description>
		</method>
		<method name="negative" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Returns the negative value of the number.
				For unsigned types, returns [code]MAX - value[/code].
				For non-number types, generates an error.
			</description>
		</method>
		<method name="newaxis" qualifiers="static">
			<return type="StringName" />
			<description>
				An alias for the StringName &amp;"newaxis". In a subscript, this will add a dimension of size one.
			</description>
		</method>
		<method name="norm" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="ord" type="Variant" default="2" />
			<param index="2" name="axes" type="Variant" default="null" />
			<description>
				Vector norm.
				This function is able to return one of 4 different vector norms, depending on the value of the ord parameter (L0, L1, L2 and LInf).
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndf.norm] or [method ndi.norm].
			</description>
		</method>
		<method name="not_equal" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 != x2) element-wise.
			</description>
		</method>
		<method name="ones" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="shape" type="Variant" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="2" />
			<description>
				Return a new array of given shape and type, filled with ones.
			</description>
		</method>
		<method name="ones_like" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="model" type="Variant" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="13" />
			<param index="2" name="shape" type="Variant" default="null" />
			<description>
				Return a new array of ones with the same shape and type as a given array.
				DType and shape will, if supplied, override the values inferred from the given array.
			</description>
		</method>
		<method name="outer" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Compute the outer product of two vectors.
				Both vectors are flattened before the operation.
			</description>
		</method>
		<method name="pad" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="pad_width" type="Variant" />
			<param index="2" name="pad_mode" type="int" enum="nd.PadMode" default="0" />
			<param index="3" name="pad_value" type="Variant" default="0" />
			<description>
				Pad an array.
				[param pad_width] can be one of the following:
				1. number, shortcut for [code][number, number][/code].
				2. [code][before, after][/code], pads all axes equally.
				3. [code][[before_0, after_0], [before_1, after_1], ...][/code], pads axes in order.
			</description>
		</method>
		<method name="pi" qualifiers="static">
			<return type="float" />
			<description>
				The PI constant, that is the ratio of a circle's circumference to its diameter.
			</description>
		</method>
		<method name="positive" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				For number types, returns a copy of the array.
				For non-number types, generates an error.
			</description>
		</method>
		<method name="pow" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				First array elements raised to powers from second array, element-wise.
			</description>
		</method>
		<method name="prod" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Return the product of array elements over a given axis.
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndf.prod] or [method ndi.prod].
			</description>
		</method>
		<method name="rad2deg" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Convert angles from radians to degrees.
			</description>
		</method>
		<method name="range" qualifiers="static">
			<return type="Vector4i" />
			<param index="0" name="start_or_stop" type="Variant" />
			<param index="1" name="stop" type="Variant" default="&amp;&quot;no_value&quot;" />
			<param index="2" name="step" type="Variant" default="null" />
			<description>
				Create a range. arange can be called with a varying number of positional arguments:
				arange(stop): Values are generated within the half-open interval [lb]0, stop) (in other words, the interval including start but excluding stop).
				arange(start, stop): Values are generated within the half-open interval [lb]start, stop).
				arange(start, stop, step) Values are generated within the half-open interval [lb]start, stop), with spacing between values given by step.
				Note that ranges are represented as Vector4i(mask, start, stop, step).
			</description>
		</method>
		<method name="real" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<description>
				Return the real part of the complex argument.
				If the argument is not complex, returns the argument.
			</description>
		</method>
		<method name="sum_product" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<param index="2" name="axes" type="Variant" default="null" />
			<description>
				Dot product of two arrays along the given axes.
				Equivalent to [code]nd.sum(nd.multiply(a, b), axes)[/code].
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndf.sum_product] or [method ndi.sum_product].
			</description>
		</method>
		<method name="remainder" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Returns the element-wise remainder of division.
				Computes the remainder complementary to the floor_divide function. It is equivalent to the modulus operator x1 % x2 and has the same sign as the divisor x2.
			</description>
		</method>
		<method name="reshape" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="shape" type="Variant" />
			<description>
				Gives a new shape to an array without changing its data.
				Up to one element in the new shape can be -1 to infer its size.
			</description>
		</method>
		<method name="rint" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Round elements of the array to the nearest integer.
			</description>
		</method>
		<method name="round" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Round elements of the array to the nearest integer.
			</description>
		</method>
		<method name="sign" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Returns an element-wise indication of the sign of a number.
				The sign function returns -1 if x &lt; 0, 0 if x==0, 1 if x &gt; 0. nan is returned for nan inputs.
			</description>
		</method>
		<method name="sin" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Trigonometric sine, element-wise.
			</description>
		</method>
		<method name="sinh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Hyperbolic sine, element-wise.
				Equivalent to 0.5 * (nd.exp(x) - nd.exp(-x)).
			</description>
		</method>
		<method name="size_of_dtype_in_bytes" qualifiers="static">
			<return type="int" />
			<param index="0" name="dtype" type="int" enum="nd.DType" />
			<description>
				Size of a single element of an array using the dtype.
			</description>
		</method>
		<method name="sliding_window_view" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<param index="1" name="window_shape" type="Variant" />
			<description>
				Create a sliding window view into the array with the given window shape.
				Also known as rolling or moving window, the window slides across all dimensions of the array and extracts subsets of the array at all window positions.
			</description>
		</method>
		<method name="split" qualifiers="static">
			<return type="NDArray[]" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="indices_or_section_size" type="Variant" />
			<param index="2" name="axis" type="int" default="0" />
			<description>
				Split an array into multiple sub-arrays as views into v.
				This can be regarded as the opposite of [method concatenate].
				[param indices_or_section_size] must be either:
				An integer that the array can be evenly divided into.
				A list of sorted indices to split the array at.
			</description>
		</method>
		<method name="sqrt" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Return the non-negative square-root of an array, element-wise.
			</description>
		</method>
		<method name="square" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Return the element-wise square of the input.
			</description>
		</method>
		<method name="squeeze" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<description>
				Remove axes of length one from [param v].
			</description>
		</method>
		<method name="stack" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="axis" type="int" default="0" />
			<description>
				Join a sequence of arrays along a new axis.
				The axis parameter specifies the index of the new axis in the dimensions of the result. For example, if axis=0 it will be the first dimension and if axis=-1 it will be the last dimension.
				Equivalent to [code]nd.moveaxis(nd.array(v), 0, axis)[/code].
			</description>
		</method>
		<method name="std" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Compute the standard deviation along the specified axis.
				Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndf.std].
			</description>
		</method>
		<method name="subtract" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Subtract arguments, element-wise.
			</description>
		</method>
		<method name="sum" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Sum of array elements over a given axis.
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndf.sum] or [method ndi.sum].
			</description>
		</method>
		<method name="swapaxes" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="a" type="int" />
			<param index="2" name="b" type="int" />
			<description>
				Interchange two axes of an array.
			</description>
		</method>
		<method name="tan" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Compute tangent element-wise.
				Equivalent to nd.sin(x) / nd.cos(x) element-wise.
			</description>
		</method>
		<method name="tanh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Compute hyperbolic tangent element-wise.
				Equivalent to nd.sinh(x) / nd.cosh(x).
			</description>
		</method>
		<method name="tile" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="reps" type="Variant" />
			<param index="2" name="inner" type="bool" default="false" />
			<description>
				Construct an array by repeating v the number of times given by reps.
				If reps has length d, the result will have dimension of max(d, v.ndim).
				The repetitions will be applied from the innermost dimensions outwards.
				If v.ndim &gt; d, the outermost dimensions will remain unchanged.
				If v.ndim &lt; d, the array is broadcast with leading new axes.
				When [param inner]=true, elements will repeat individually rather than element groups repeating.
			</description>
		</method>
		<method name="to" qualifiers="static">
			<return type="Vector4i" />
			<param index="0" name="stop" type="int" />
			<description>
				Create a range that starts at 0, and stops at the given index (exclusive).
			</description>
		</method>
		<method name="trace" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="offset" type="int" default="0" />
			<param index="2" name="axis1" type="int" default="0" />
			<param index="3" name="axis2" type="int" default="1" />
			<description>
				Return the sum of the k-th diagonal of a matrix.
				The shape of the result will be the same as [param v], but with the two given axes removed.
				Returns a 0-dimension scalar if [param v] is 2-D. In that case, consider [method ndi.trace] and [method ndf.trace].
			</description>
		</method>
		<method name="transpose" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="permutation" type="Variant" default="null" />
			<description>
				Returns an array with axes transposed.
				If [param permutation] is not given, reverses the order of the axes.
			</description>
		</method>
		<method name="trunc" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Return the truncated value of the input, element-wise.
				The truncated value of the scalar x is the nearest integer i which is closer to zero than x is. In short, the fractional part of the signed number x is discarded.
			</description>
		</method>
		<method name="uint8" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to a uint8 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.UInt8)[/code].
			</description>
		</method>
		<method name="uint16" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to a uint16 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.UInt16)[/code].
			</description>
		</method>
		<method name="uint32" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to a uint32 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.UInt32)[/code].
			</description>
		</method>
		<method name="uint64" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" />
			<description>
				Convert to a uint64 dtype tensor.
				Equivalent to [code]nd.as_array(array, nd.DType.UInt64)[/code].
			</description>
		</method>
		<method name="unstack" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="axis" type="int" default="0" />
			<description>
				Unpacks the given dimension of a rank-R tensor into a sequence of R-1 tensors. Opposite of [method stack].
				Equivalent to [code]nd.moveaxis(array, axis, 0)[/code].
			</description>
		</method>
		<method name="var" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Compute the variance along the specified axis.
				Returns the variance of the array elements, a measure of the spread of a distribution. The variance is computed for the flattened array by default, otherwise over the specified axis.
				Returns a 0-dimension scalar if axes is null. In that case, consider [method ndf.var].
			</description>
		</method>
		<method name="vector_as_complex" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="keepdims" type="bool" default="false" />
			<param index="2" name="dtype" type="int" enum="nd.DType" default="13" />
			<description>
				Reinterprets a real valued array with [code]shape[-1] == 2[/code] as a complex valued array.
				If [param keepdims] is false (default), the last dimension will be consumed. Otherwise, it will be 1.
				This function will return a view if possible, but create a new array otherwise.
			</description>
		</method>
		<method name="vsplit" qualifiers="static">
			<return type="NDArray[]" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="indices_or_section_size" type="Variant" />
			<description>
				Split an array into multiple sub-arrays vertically (row-wise).
				Please refer to [method split]. vsplit is equivalent to split with axis=0 (default), the array is always split along the first axis regardless of the array dimension.
			</description>
		</method>
		<method name="vstack" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="13" />
			<description>
				Stack arrays in sequence vertically (row wise).
				This is equivalent to concatenation along the first axis after 1-D arrays of shape (N,) have been reshaped to (1,N). Rebuilds arrays divided by vsplit.
				This function makes most sense for arrays with up to 3 dimensions. For instance, for pixel-data with a height (first axis), width (second axis), and r/g/b channels (third axis). The functions concatenate, stack and block provide more general stacking and concatenation operations.
			</description>
		</method>
		<method name="zeros" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="shape" type="Variant" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="2" />
			<description>
				Return a new array of given shape and type, filled with zeros.
			</description>
		</method>
		<method name="zeros_like" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="model" type="Variant" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="13" />
			<param index="2" name="shape" type="Variant" default="null" />
			<description>
				Return a new array of ones with the same shape and type as a given array.
				DType and shape will, if supplied, override the values inferred from the given array.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="Bool" value="0" enum="DType">
			Boolean type (true or false), stored as a byte.
		</constant>
		<constant name="Float32" value="1" enum="DType">
			Single-precision (32 bit) floating-point number type.
		</constant>
		<constant name="Float64" value="2" enum="DType">
			Double-precision (64 bit) floating-point number type.
		</constant>
		<constant name="Complex64" value="3" enum="DType">
			Complex number type composed of two single-precision floating-point numbers.
		</constant>
		<constant name="Complex128" value="4" enum="DType">
			Complex number type composed of two double-precision floating-point numbers.
		</constant>
		<constant name="Int8" value="5" enum="DType">
			Signed integer type with 8 bits.
		</constant>
		<constant name="Int16" value="6" enum="DType">
			Signed integer type with 16 bits.
		</constant>
		<constant name="Int32" value="7" enum="DType">
			Signed integer type with 32 bits.
		</constant>
		<constant name="Int64" value="8" enum="DType">
			Signed integer type with 64 bits.
		</constant>
		<constant name="UInt8" value="9" enum="DType">
			Unsigned integer type with 8 bits. This dtype cannot express negative values.
		</constant>
		<constant name="UInt16" value="10" enum="DType">
			Unsigned integer type with 16 bits. This dtype cannot express negative values.
		</constant>
		<constant name="UInt32" value="11" enum="DType">
			Unsigned integer type with 32 bits. This dtype cannot express negative values.
		</constant>
		<constant name="UInt64" value="12" enum="DType">
			Unsigned integer type with 64 bits. This dtype cannot express negative values.
		</constant>
		<constant name="DTypeMax" value="13" enum="DType">
		</constant>
		<constant name="Constant" value="0" enum="PadMode">
			Pads with a constant value, given by pad_value.
		</constant>
		<constant name="Symmetric" value="1" enum="PadMode">
			Pads with the reflection of the vector mirrored along the edge of the array.
		</constant>
		<constant name="Reflect" value="2" enum="PadMode">
			Pads with the reflection of the vector mirrored on the first and last values of the vector along each axis.
		</constant>
		<constant name="Wrap" value="3" enum="PadMode">
			Pads with the wrap of the vector along the axis. The first values are used to pad the end and the end values are used to pad the beginning.
		</constant>
		<constant name="Edge" value="4" enum="PadMode">
			Pads with the edge values of array.
		</constant>
	</constants>
</class>
