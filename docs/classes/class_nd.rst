:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/godot/NumDot/doc_classes/nd.xml.

.. _class_nd:

nd
==

**Inherits:** ``Object``

Contains NumDot functions returning tensors.

.. rst-class:: classref-introduction-group

Description
-----------

The base namespace for NumDot functions.

All mathematical functions in this namespace return tensors. For reduction results further used in scalar computation, consider using :ref:`ndb<class_ndb>`, :ref:`ndf<class_ndf>` and :ref:`ndi<class_ndi>` instead.

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`abs<class_nd_method_abs>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`acos<class_nd_method_acos>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`acosh<class_nd_method_acosh>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`add<class_nd_method_add>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`all<class_nd_method_all>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                                                  |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`angle<class_nd_method_angle>`\ (\ v\: ``Variant``\ ) |static|                                                                                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`any<class_nd_method_any>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                                                  |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`arange<class_nd_method_arange>`\ (\ start_or_stop\: ``Variant``, stop\: ``Variant`` = null, step\: ``Variant`` = 1, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static|              |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`array<class_nd_method_array>`\ (\ array\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static|                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`as_array<class_nd_method_as_array>`\ (\ array\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static|                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`asin<class_nd_method_asin>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`asinh<class_nd_method_asinh>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`atan<class_nd_method_atan>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`atan2<class_nd_method_atan2>`\ (\ x1\: ``Variant``, x2\: ``Variant``\ ) |static|                                                                                                      |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`atanh<class_nd_method_atanh>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`bitwise_and<class_nd_method_bitwise_and>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`bitwise_left_shift<class_nd_method_bitwise_left_shift>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                              |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`bitwise_not<class_nd_method_bitwise_not>`\ (\ a\: ``Variant``\ ) |static|                                                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`bitwise_or<class_nd_method_bitwise_or>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                              |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`bitwise_right_shift<class_nd_method_bitwise_right_shift>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`bitwise_xor<class_nd_method_bitwise_xor>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`bool_<class_nd_method_bool_>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`ceil<class_nd_method_ceil>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`clip<class_nd_method_clip>`\ (\ a\: ``Variant``, min\: ``Variant``, max\: ``Variant``\ ) |static|                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`complex64<class_nd_method_complex64>`\ (\ array\: ``Variant``\ ) |static|                                                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`complex128<class_nd_method_complex128>`\ (\ array\: ``Variant``\ ) |static|                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`complex_as_vector<class_nd_method_complex_as_vector>`\ (\ v\: ``Variant``\ ) |static|                                                                                                 |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`concatenate<class_nd_method_concatenate>`\ (\ v\: ``Variant``, axis\: ``int`` = 0, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static|                                               |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`conjugate<class_nd_method_conjugate>`\ (\ v\: ``Variant``\ ) |static|                                                                                                                 |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`convolve<class_nd_method_convolve>`\ (\ array\: ``Variant``, kernel\: ``Variant``\ ) |static|                                                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`copy<class_nd_method_copy>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                       |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`cos<class_nd_method_cos>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`cosh<class_nd_method_cosh>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`count_nonzero<class_nd_method_count_nonzero>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                              |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`cross<class_nd_method_cross>`\ (\ a\: ``Variant``, b\: ``Variant``, axisa\: ``int`` = -1, axisb\: ``int`` = -1, axisc\: ``int`` = -1\ ) |static|                                      |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDRandomGenerator<class_NDRandomGenerator>`          | :ref:`default_rng<class_nd_method_default_rng>`\ (\ seed\: ``Variant`` = null\ ) |static|                                                                                                   |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`deg2rad<class_nd_method_deg2rad>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`diag<class_nd_method_diag>`\ (\ v\: ``Variant``, offset\: ``int`` = 0\ ) |static|                                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`diagonal<class_nd_method_diagonal>`\ (\ v\: ``Variant``, offset\: ``int`` = 0, axis1\: ``int`` = 0, axis2\: ``int`` = 1\ ) |static|                                                   |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`divide<class_nd_method_divide>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                      |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`dot<class_nd_method_dot>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``PackedByteArray``                                        | :ref:`dumpb<class_nd_method_dumpb>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``StringName``                                             | :ref:`ellipsis<class_nd_method_ellipsis>`\ (\ ) |static|                                                                                                                                    |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`empty<class_nd_method_empty>`\ (\ shape\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) |static|                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`empty_like<class_nd_method_empty_like>`\ (\ model\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13, shape\: ``Variant`` = null\ ) |static|                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`equal<class_nd_method_equal>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                        |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`exp<class_nd_method_exp>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`eye<class_nd_method_eye>`\ (\ shape\: ``Variant``, k\: ``int`` = 0, dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) |static|                                                               |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`fft<class_nd_method_fft>`\ (\ v\: ``Variant``, axis\: ``int`` = -1\ ) |static|                                                                                                        |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`fft_freq<class_nd_method_fft_freq>`\ (\ n\: ``int``, d\: ``float`` = 1\ ) |static|                                                                                                    |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`flip<class_nd_method_flip>`\ (\ v\: ``Variant``, axis\: ``int``\ ) |static|                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`float32<class_nd_method_float32>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                 |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`float64<class_nd_method_float64>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                 |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`floor<class_nd_method_floor>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``Vector4i``                                               | :ref:`from<class_nd_method_from>`\ (\ start\: ``int``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`full<class_nd_method_full>`\ (\ shape\: ``Variant``, fill_value\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) |static|                                                    |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`full_like<class_nd_method_full_like>`\ (\ model\: ``Variant``, fill_value\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13, shape\: ``Variant`` = null\ ) |static|             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`greater<class_nd_method_greater>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                    |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`greater_equal<class_nd_method_greater_equal>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                        |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Array<class_Array>`\[:ref:`NDArray<class_NDArray>`\] | :ref:`hsplit<class_nd_method_hsplit>`\ (\ v\: ``Variant``, indices_or_section_size\: ``Variant``\ ) |static|                                                                                |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`hstack<class_nd_method_hstack>`\ (\ v\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static|                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`imag<class_nd_method_imag>`\ (\ v\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`int8<class_nd_method_int8>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                       |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`int16<class_nd_method_int16>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`int32<class_nd_method_int32>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`int64<class_nd_method_int64>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`is_close<class_nd_method_is_close>`\ (\ a\: ``Variant``, b\: ``Variant``, rtol\: ``float`` = 1e-05, atol\: ``float`` = 1e-08, equal_nan\: ``bool`` = false\ ) |static|                |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`is_finite<class_nd_method_is_finite>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                 |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`is_inf<class_nd_method_is_inf>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                       |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`is_nan<class_nd_method_is_nan>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                       |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`less<class_nd_method_less>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                          |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`less_equal<class_nd_method_less_equal>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                              |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`linspace<class_nd_method_linspace>`\ (\ start\: ``Variant``, stop\: ``Variant``, num\: ``int`` = 50, endpoint\: ``bool`` = true, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static| |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`load<class_nd_method_load>`\ (\ file_or_buffer\: ``Variant``\ ) |static|                                                                                                              |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`log<class_nd_method_log>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`logical_and<class_nd_method_logical_and>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`logical_not<class_nd_method_logical_not>`\ (\ a\: ``Variant``\ ) |static|                                                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`logical_or<class_nd_method_logical_or>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                              |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`logical_xor<class_nd_method_logical_xor>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`matmul<class_nd_method_matmul>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                      |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`max<class_nd_method_max>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                                                  |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`maximum<class_nd_method_maximum>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                    |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`mean<class_nd_method_mean>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                                                |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`median<class_nd_method_median>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`min<class_nd_method_min>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                                                  |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`minimum<class_nd_method_minimum>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                    |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`moveaxis<class_nd_method_moveaxis>`\ (\ v\: ``Variant``, src\: ``int``, dst\: ``int``\ ) |static|                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`multiply<class_nd_method_multiply>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                  |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`negative<class_nd_method_negative>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                   |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``StringName``                                             | :ref:`newaxis<class_nd_method_newaxis>`\ (\ ) |static|                                                                                                                                      |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`norm<class_nd_method_norm>`\ (\ a\: ``Variant``, ord\: ``Variant`` = 2, axes\: ``Variant`` = null\ ) |static|                                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`not_equal<class_nd_method_not_equal>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`ones<class_nd_method_ones>`\ (\ shape\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) |static|                                                                              |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`ones_like<class_nd_method_ones_like>`\ (\ model\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13, shape\: ``Variant`` = null\ ) |static|                                       |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`pad<class_nd_method_pad>`\ (\ v\: ``Variant``, pad_width\: ``Variant``, pad_mode\: :ref:`PadMode<enum_nd_PadMode>` = 0, pad_value\: ``Variant`` = 0\ ) |static|                       |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`positive<class_nd_method_positive>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                   |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`pow<class_nd_method_pow>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`prod<class_nd_method_prod>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                                                |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`rad2deg<class_nd_method_rad2deg>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``Vector4i``                                               | :ref:`range<class_nd_method_range>`\ (\ start_or_stop\: ``Variant``, stop\: ``Variant`` = &"no_value", step\: ``Variant`` = null\ ) |static|                                                |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`real<class_nd_method_real>`\ (\ v\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`sum_product<class_nd_method_reduce_dot>`\ (\ a\: ``Variant``, b\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                   |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`remainder<class_nd_method_remainder>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`reshape<class_nd_method_reshape>`\ (\ a\: ``Variant``, shape\: ``Variant``\ ) |static|                                                                                                |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`rint<class_nd_method_rint>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`round<class_nd_method_round>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`sign<class_nd_method_sign>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`sin<class_nd_method_sin>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`sinh<class_nd_method_sinh>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``int``                                                    | :ref:`size_of_dtype_in_bytes<class_nd_method_size_of_dtype_in_bytes>`\ (\ dtype\: :ref:`DType<enum_nd_DType>`\ ) |static|                                                                   |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`sliding_window_view<class_nd_method_sliding_window_view>`\ (\ array\: ``Variant``, window_shape\: ``Variant``\ ) |static|                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Array<class_Array>`\[:ref:`NDArray<class_NDArray>`\] | :ref:`split<class_nd_method_split>`\ (\ v\: ``Variant``, indices_or_section_size\: ``Variant``, axis\: ``int`` = 0\ ) |static|                                                              |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`sqrt<class_nd_method_sqrt>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`square<class_nd_method_square>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                       |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`stack<class_nd_method_stack>`\ (\ v\: ``Variant``, axis\: ``int`` = 0\ ) |static|                                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`std<class_nd_method_std>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                                                  |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`subtract<class_nd_method_subtract>`\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static|                                                                                                  |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`sum<class_nd_method_sum>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                                                  |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`swapaxes<class_nd_method_swapaxes>`\ (\ v\: ``Variant``, a\: ``int``, b\: ``int``\ ) |static|                                                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`tan<class_nd_method_tan>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`tanh<class_nd_method_tanh>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                           |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`tile<class_nd_method_tile>`\ (\ v\: ``Variant``, reps\: ``Variant``, inner\: ``bool`` = false\ ) |static|                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | ``Vector4i``                                               | :ref:`to<class_nd_method_to>`\ (\ stop\: ``int``\ ) |static|                                                                                                                                |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`trace<class_nd_method_trace>`\ (\ v\: ``Variant``, offset\: ``int`` = 0, axis1\: ``int`` = 0, axis2\: ``int`` = 1\ ) |static|                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`transpose<class_nd_method_transpose>`\ (\ a\: ``Variant``, permutation\: ``Variant`` = null\ ) |static|                                                                               |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`trunc<class_nd_method_trunc>`\ (\ a\: ``Variant``\ ) |static|                                                                                                                         |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`uint8<class_nd_method_uint8>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`uint16<class_nd_method_uint16>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                   |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`uint32<class_nd_method_uint32>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                   |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`uint64<class_nd_method_uint64>`\ (\ array\: ``Variant``\ ) |static|                                                                                                                   |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`unstack<class_nd_method_unstack>`\ (\ v\: ``Variant``, axis\: ``int`` = 0\ ) |static|                                                                                                 |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`var<class_nd_method_var>`\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static|                                                                                                  |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`vector_as_complex<class_nd_method_vector_as_complex>`\ (\ v\: ``Variant``, keepdims\: ``bool`` = false, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static|                          |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Array<class_Array>`\[:ref:`NDArray<class_NDArray>`\] | :ref:`vsplit<class_nd_method_vsplit>`\ (\ v\: ``Variant``, indices_or_section_size\: ``Variant``\ ) |static|                                                                                |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`vstack<class_nd_method_vstack>`\ (\ v\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static|                                                                             |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`zeros<class_nd_method_zeros>`\ (\ shape\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) |static|                                                                            |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                              | :ref:`zeros_like<class_nd_method_zeros_like>`\ (\ model\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13, shape\: ``Variant`` = null\ ) |static|                                     |
   +------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Enumerations
------------

.. _enum_nd_DType:

.. rst-class:: classref-enumeration

enum **DType**: :ref:`🔗<enum_nd_DType>`

.. _class_nd_constant_Bool:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **Bool** = ``0``

Boolean type (true or false), stored as a byte.

.. _class_nd_constant_Float32:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **Float32** = ``1``

Single-precision (32 bit) floating-point number type.

.. _class_nd_constant_Float64:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **Float64** = ``2``

Double-precision (64 bit) floating-point number type.

.. _class_nd_constant_Complex64:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **Complex64** = ``3``

Complex number type composed of two single-precision floating-point numbers.

.. _class_nd_constant_Complex128:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **Complex128** = ``4``

Complex number type composed of two double-precision floating-point numbers.

.. _class_nd_constant_Int8:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **Int8** = ``5``

Signed integer type with 8 bits.

.. _class_nd_constant_Int16:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **Int16** = ``6``

Signed integer type with 16 bits.

.. _class_nd_constant_Int32:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **Int32** = ``7``

Signed integer type with 32 bits.

.. _class_nd_constant_Int64:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **Int64** = ``8``

Signed integer type with 64 bits.

.. _class_nd_constant_UInt8:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **UInt8** = ``9``

Unsigned integer type with 8 bits. This dtype cannot express negative values.

.. _class_nd_constant_UInt16:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **UInt16** = ``10``

Unsigned integer type with 16 bits. This dtype cannot express negative values.

.. _class_nd_constant_UInt32:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **UInt32** = ``11``

Unsigned integer type with 32 bits. This dtype cannot express negative values.

.. _class_nd_constant_UInt64:

.. rst-class:: classref-enumeration-constant

:ref:`DType<enum_nd_DType>` **UInt64** = ``12``

Unsigned integer type with 64 bits. This dtype cannot express negative values.

.. rst-class:: classref-item-separator

----

.. _enum_nd_PadMode:

.. rst-class:: classref-enumeration

enum **PadMode**: :ref:`🔗<enum_nd_PadMode>`

.. _class_nd_constant_Constant:

.. rst-class:: classref-enumeration-constant

:ref:`PadMode<enum_nd_PadMode>` **Constant** = ``0``

Pads with a constant value, given by pad_value.

.. _class_nd_constant_Symmetric:

.. rst-class:: classref-enumeration-constant

:ref:`PadMode<enum_nd_PadMode>` **Symmetric** = ``1``

Pads with the reflection of the vector mirrored along the edge of the array.

.. _class_nd_constant_Reflect:

.. rst-class:: classref-enumeration-constant

:ref:`PadMode<enum_nd_PadMode>` **Reflect** = ``2``

Pads with the reflection of the vector mirrored on the first and last values of the vector along each axis.

.. _class_nd_constant_Wrap:

.. rst-class:: classref-enumeration-constant

:ref:`PadMode<enum_nd_PadMode>` **Wrap** = ``3``

Pads with the wrap of the vector along the axis. The first values are used to pad the end and the end values are used to pad the beginning.

.. _class_nd_constant_Edge:

.. rst-class:: classref-enumeration-constant

:ref:`PadMode<enum_nd_PadMode>` **Edge** = ``4``

Pads with the edge values of array.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_nd_method_abs:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **abs**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_abs>`

Calculate the absolute value element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_acos:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **acos**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_acos>`

Trigonometric inverse cosine, element-wise.

The inverse of cos so that, if y = cos(x), then x = arccos(y).

.. rst-class:: classref-item-separator

----

.. _class_nd_method_acosh:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **acosh**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_acosh>`

Inverse hyperbolic cosine, element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_add:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **add**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_add>`

Add arguments element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_all:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **all**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_all>`

Test whether all array elements along a given axis evaluate to True.

Returns a 0-dimension boolean if axes is null. In that case, :ref:`ndb.all<class_ndb_method_all>` is preferred.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_angle:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **angle**\ (\ v\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_angle>`

Return the angle of the complex argument.

This is equivalent to ``nd.atan2(nd.imag(x), nd.real(x))``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_any:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **any**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_any>`

Test whether any array element along a given axis evaluates to True.

Returns a 0-dimension boolean if axes is null. In that case, :ref:`ndb.any<class_ndb_method_any>` is preferred.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_arange:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **arange**\ (\ start_or_stop\: ``Variant``, stop\: ``Variant`` = null, step\: ``Variant`` = 1, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static| :ref:`🔗<class_nd_method_arange>`

Return evenly spaced values within a given interval.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_array:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **array**\ (\ array\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static| :ref:`🔗<class_nd_method_array>`

Create a new :ref:`NDArray<class_NDArray>` of the given DType from the given data.

If the input is an :ref:`NDArray<class_NDArray>`, it will be copied.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_as_array:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **as_array**\ (\ array\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static| :ref:`🔗<class_nd_method_as_array>`

Convert the input to an array, but avoid copying data if possible.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_asin:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **asin**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_asin>`

Inverse sine, element-wise.

The inverse of sine, so that if y = sin(x) then x = arcsin(y).

.. rst-class:: classref-item-separator

----

.. _class_nd_method_asinh:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **asinh**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_asinh>`

Inverse hyperbolic sine element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_atan:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **atan**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_atan>`

Trigonometric inverse tangent, element-wise.

The inverse of tan, so that if y = tan(x) then x = arctan(y).

.. rst-class:: classref-item-separator

----

.. _class_nd_method_atan2:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **atan2**\ (\ x1\: ``Variant``, x2\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_atan2>`

Element-wise arc tangent of x1/x2 choosing the quadrant correctly.

The quadrant (i.e., branch) is chosen so that arctan2(x1, x2) is the signed angle in radians between the ray ending at the origin and passing through the point (1,0), and the ray ending at the origin and passing through the point (x2, x1). (Note the role reversal: the “y-coordinate” is the first function parameter, the “x-coordinate” is the second.) By IEEE convention, this function is defined for x2 = +/-0 and for either or both of x1 and x2 = +/-inf.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_atanh:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **atanh**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_atanh>`

Inverse hyperbolic tangent element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_bitwise_and:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **bitwise_and**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_bitwise_and>`

Compute the bit-wise AND of two arrays element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_bitwise_left_shift:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **bitwise_left_shift**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_bitwise_left_shift>`

Shift the bits of an integer to the left.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_bitwise_not:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **bitwise_not**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_bitwise_not>`

Compute bit-wise inversion, or bit-wise NOT, element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_bitwise_or:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **bitwise_or**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_bitwise_or>`

Compute the bit-wise OR of two arrays element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_bitwise_right_shift:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **bitwise_right_shift**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_bitwise_right_shift>`

Shift the bits of an integer to the right.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_bitwise_xor:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **bitwise_xor**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_bitwise_xor>`

Compute the bit-wise XOR of two arrays element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_bool_:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **bool_**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_bool_>`

Convert to a bool dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.Bool)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_ceil:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **ceil**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_ceil>`

Return the ceiling of the input, element-wise.

The ceil of the scalar x is the smallest integer i, such that i >= x.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_clip:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **clip**\ (\ a\: ``Variant``, min\: ``Variant``, max\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_clip>`

Clip (limit) the values in an array.

Given an interval, values outside the interval are clipped to the interval edges. For example, if an interval of \[0, 1\] is specified, values smaller than 0 become 0, and values larger than 1 become 1.

Equivalent to but faster than nd.minimum(a_max, nd.maximum(a, a_min)).

No check is performed to ensure a_min < a_max.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_complex64:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **complex64**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_complex64>`

Convert to a complex64 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.Complex64)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_complex128:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **complex128**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_complex128>`

Convert to a complex128 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.Complex128)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_complex_as_vector:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **complex_as_vector**\ (\ v\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_complex_as_vector>`

Reinterprets elements in a complex-typed array as a 2-D vector.

The new dimension is added in the back.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_concatenate:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **concatenate**\ (\ v\: ``Variant``, axis\: ``int`` = 0, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static| :ref:`🔗<class_nd_method_concatenate>`

Join a sequence of arrays along an existing axis.

The arrays must match in dimension except in the axis.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_conjugate:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **conjugate**\ (\ v\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_conjugate>`

Return the complex conjugate, element-wise.

The complex conjugate of a complex number is obtained by changing the sign of its imaginary part.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_convolve:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **convolve**\ (\ array\: ``Variant``, kernel\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_convolve>`

Convolve two N-dimensional arrays. They are broadcasted against each other in the inner dimensions.

Currently, kernel must be smaller than array in all dimensions.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_copy:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **copy**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_copy>`

Creates a copy of the given array.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_cos:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **cos**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_cos>`

Cosine element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_cosh:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **cosh**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_cosh>`

Hyperbolic cosine, element-wise.

Equivalent to 0.5 \* (nd.exp(x) + nd.exp(-x)).

.. rst-class:: classref-item-separator

----

.. _class_nd_method_count_nonzero:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **count_nonzero**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_count_nonzero>`

Counts the number of non-zero values in the array a along the given axes.

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndi.count_nonzero<class_ndi_method_count_nonzero>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_cross:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **cross**\ (\ a\: ``Variant``, b\: ``Variant``, axisa\: ``int`` = -1, axisb\: ``int`` = -1, axisc\: ``int`` = -1\ ) |static| :ref:`🔗<class_nd_method_cross>`

Return the cross product of two (arrays of) vectors.

The cross product of a and b in R3 is a vector perpendicular to both a and b. If a and b are arrays of vectors, the vectors are defined by the last axis of a and b by default, and these axes can have dimensions 2 or 3. Where the dimension of either a or b is 2, the third component of the input vector is assumed to be zero and the cross product calculated accordingly. In cases where both input vectors have dimension 2, the z-component of the cross product is returned.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_default_rng:

.. rst-class:: classref-method

:ref:`NDRandomGenerator<class_NDRandomGenerator>` **default_rng**\ (\ seed\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_default_rng>`

Creates a new random number generator (rng) with the default random engine (mt19937).

If no seed is provided, a fresh, unpredictable entropy will be pulled from the OS.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_deg2rad:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **deg2rad**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_deg2rad>`

Convert angles from degrees to radians.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_diag:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **diag**\ (\ v\: ``Variant``, offset\: ``int`` = 0\ ) |static| :ref:`🔗<class_nd_method_diag>`

This function does one of two things, depending on the dimension of the input array:

1-D: Constructs a square matrix from a k-th diagonal, with all other positions being 0.

2-D: Returns a view of the k-th diagonal, like :ref:`diagonal<class_nd_method_diagonal>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_diagonal:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **diagonal**\ (\ v\: ``Variant``, offset\: ``int`` = 0, axis1\: ``int`` = 0, axis2\: ``int`` = 1\ ) |static| :ref:`🔗<class_nd_method_diagonal>`

Return specified matrix diagonals. This is a view of the given array.

If the array has more than 2 dimensions, the given dimensions are removed, and the new dimension is inserted as the new last (innermost) dimension.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_divide:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **divide**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_divide>`

Divide arguments element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_dot:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **dot**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_dot>`

Dot product of two arrays. Specifically,



If either a or b is 0-D (scalar), it is equivalent to multiply, but using :ref:`multiply<class_nd_method_multiply>` or a \* b is preferred.

If both a and b are 2-D or less, but not 0-D, it is equal to :ref:`matmul<class_nd_method_matmul>`, and using it is preferred.

Otherwise, it would be equivalent to tensordot, but currently fails.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_dumpb:

.. rst-class:: classref-method

``PackedByteArray`` **dumpb**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_dumpb>`

Save an array to a buffer in NumPy .npy format.

See :ref:`load<class_nd_method_load>` to load an array in the same format.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_ellipsis:

.. rst-class:: classref-method

``StringName`` **ellipsis**\ (\ ) |static| :ref:`🔗<class_nd_method_ellipsis>`

An alias for the StringName &"...". In a subscript, this will stand in for omitted dimensions, for example if you want to index the last dimension.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_empty:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **empty**\ (\ shape\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) |static| :ref:`🔗<class_nd_method_empty>`

Return a new array of given shape and type, without initializing entries.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_empty_like:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **empty_like**\ (\ model\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13, shape\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_empty_like>`

Return a new array with the same shape and type as a given array.

DType and shape will, if supplied, override the values inferred from the given array.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_equal:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **equal**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_equal>`

Return (x1 == x2) element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_exp:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **exp**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_exp>`

Calculate the exponential of all elements in the input array.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_eye:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **eye**\ (\ shape\: ``Variant``, k\: ``int`` = 0, dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) |static| :ref:`🔗<class_nd_method_eye>`

Return a tensor with ones on the diagonal, and 0 elsewhere. The shape depends on the first parameter:

If an int N is given, an NxN matrix is returned.

Otherwise, the first parameter is interpreted as a shape.

k is the index of the diagonal: 0 (the default) refers to the main diagonal, a positive value refers to an upper diagonal, and a negative value to a lower diagonal.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_fft:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **fft**\ (\ v\: ``Variant``, axis\: ``int`` = -1\ ) |static| :ref:`🔗<class_nd_method_fft>`

Compute the one-dimensional discrete Fourier Transform.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_fft_freq:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **fft_freq**\ (\ n\: ``int``, d\: ``float`` = 1\ ) |static| :ref:`🔗<class_nd_method_fft_freq>`

Return the Discrete Fourier Transform sample frequencies.

The returned float array f contains the frequency bin centers in cycles per unit of the sample spacing (with zero at the start). For instance, if the sample spacing is in seconds, then the frequency unit is cycles/second.

Given a window length n and a sample spacing d:

\ ``f = [0, 1, ...,   n/2-1,     -n/2, ..., -1] / (d*n)   if n is even``\ 

\ ``f = [0, 1, ..., (n-1)/2, -(n-1)/2, ..., -1] / (d*n)   if n is odd``

.. rst-class:: classref-item-separator

----

.. _class_nd_method_flip:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **flip**\ (\ v\: ``Variant``, axis\: ``int``\ ) |static| :ref:`🔗<class_nd_method_flip>`

Reverse the order of elements in an array along the given axis.

The shape of the array is preserved, but the elements are reordered.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_float32:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **float32**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_float32>`

Convert to a float32 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.Float32)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_float64:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **float64**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_float64>`

Convert to a float64 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.Float64)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_floor:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **floor**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_floor>`

Return the floor of the input, element-wise.

The floor of the scalar x is the largest integer i, such that i <= x.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_from:

.. rst-class:: classref-method

``Vector4i`` **from**\ (\ start\: ``int``\ ) |static| :ref:`🔗<class_nd_method_from>`

Create a range that starts at the given index.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_full:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **full**\ (\ shape\: ``Variant``, fill_value\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) |static| :ref:`🔗<class_nd_method_full>`

Return a new array of given shape and type, filled with fill_value.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_full_like:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **full_like**\ (\ model\: ``Variant``, fill_value\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13, shape\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_full_like>`

Return a new array with the same shape and type as a given array, filled with the given value.

DType and shape will, if supplied, override the values inferred from the given array.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_greater:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **greater**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_greater>`

Return (x1 > x2) element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_greater_equal:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **greater_equal**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_greater_equal>`

Return (x1 >= x2) element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_hsplit:

.. rst-class:: classref-method

:ref:`Array<class_Array>`\[:ref:`NDArray<class_NDArray>`\] **hsplit**\ (\ v\: ``Variant``, indices_or_section_size\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_hsplit>`

Split an array into multiple sub-arrays horizontally (column-wise).

Please refer to :ref:`split<class_nd_method_split>`. hsplit is equivalent to :ref:`split<class_nd_method_split>` with axis=1, the array is always split along the second axis except for 1-D arrays, where it is split at axis=0.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_hstack:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **hstack**\ (\ v\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static| :ref:`🔗<class_nd_method_hstack>`

Stack arrays in sequence horizontally (column wise).

This is equivalent to concatenation along the second axis, except for 1-D arrays where it concatenates along the first axis. Rebuilds arrays divided by hsplit.

This function makes most sense for arrays with up to 3 dimensions. For instance, for pixel-data with a height (first axis), width (second axis), and r/g/b channels (third axis). The functions concatenate, stack and block provide more general stacking and concatenation operations.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_imag:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **imag**\ (\ v\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_imag>`

Return the imaginary part of the complex argument.

If the argument is not complex, returns a non-writeable array.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_int8:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **int8**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_int8>`

Convert to an int8 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.Int8)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_int16:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **int16**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_int16>`

Convert to an int16 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.Int16)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_int32:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **int32**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_int32>`

Convert to an int32 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.Int32)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_int64:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **int64**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_int64>`

Convert to an int64 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.Int64)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_is_close:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **is_close**\ (\ a\: ``Variant``, b\: ``Variant``, rtol\: ``float`` = 1e-05, atol\: ``float`` = 1e-08, equal_nan\: ``bool`` = false\ ) |static| :ref:`🔗<class_nd_method_is_close>`

Returns a boolean array where two arrays are element-wise equal within a tolerance.

The tolerance values are positive, typically very small numbers. The relative difference (rtol \* abs(b)) and the absolute difference atol are added together to compare against the absolute difference between a and b.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_is_finite:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **is_finite**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_is_finite>`

Test element-wise for finiteness (not infinity and not Not a Number).

The result is returned as a boolean array.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_is_inf:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **is_inf**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_is_inf>`

Test element-wise for positive or negative infinity.

Returns a boolean array of the same shape as x, True where x == +/-inf, otherwise False.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_is_nan:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **is_nan**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_is_nan>`

Test element-wise for NaN and return result as a boolean array.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_less:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **less**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_less>`

Return (x1 < x2) element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_less_equal:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **less_equal**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_less_equal>`

Return (x1 <= x2) element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_linspace:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **linspace**\ (\ start\: ``Variant``, stop\: ``Variant``, num\: ``int`` = 50, endpoint\: ``bool`` = true, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static| :ref:`🔗<class_nd_method_linspace>`

Return evenly spaced numbers over a specified interval.

Returns num evenly spaced samples, calculated over the interval \[start, stop\].

The endpoint of the interval can optionally be excluded.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_load:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **load**\ (\ file_or_buffer\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_load>`

Load arrays in npy format.

Supports ``FileAccess``, ``PackedByteArray`` and ``String`` path parameters.

See :ref:`dumpb<class_nd_method_dumpb>` to write an array to the same format.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_log:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **log**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_log>`

Natural logarithm, element-wise.

The natural logarithm log is the inverse of the exponential function, so that log(exp(x)) = x. The natural logarithm is logarithm in base e.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_logical_and:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **logical_and**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_logical_and>`

Compute the truth value of x1 AND x2 element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_logical_not:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **logical_not**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_logical_not>`

Compute the truth value of NOT x element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_logical_or:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **logical_or**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_logical_or>`

Compute the truth value of x1 OR x2 element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_logical_xor:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **logical_xor**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_logical_xor>`

Compute the truth value of x1 XOR x2 element-wise.

Similar to :ref:`not_equal<class_nd_method_not_equal>`, but converts all arguments to boolean before computation.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_matmul:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **matmul**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_matmul>`

Matrix multiplication of two arrays.

The behavior depends on the arguments in the following way:

If either of the arguments is 0-D, the operation fails.

If both arguments are 2-D they are multiplied like conventional matrices.

If the first argument is 1-D, it is promoted to a matrix by prepending a 1 to its dimensions. After matrix multiplication the prepended 1 is removed.

If the second argument is 1-D, it is promoted to a matrix by appending a 1 to its dimensions. After matrix multiplication the appended 1 is removed.

If either argument is N-D, N > 2, it is treated as a stack of matrices residing in the last two indexes and broadcast accordingly.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_max:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **max**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_max>`

Return the maximum of an array or maximum along an axis.

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndf.max<class_ndf_method_max>` or :ref:`ndi.max<class_ndi_method_max>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_maximum:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **maximum**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_maximum>`

Element-wise maximum of array elements.

Compare two arrays and return a new array containing the element-wise maxima. If one of the elements being compared is a NaN, then that element is returned. If both elements are NaNs then the first is returned. The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_mean:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **mean**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_mean>`

Compute the arithmetic mean along the specified axis.

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndf.mean<class_ndf_method_mean>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_median:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **median**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_median>`

Compute the median along the specified axis. The median is the middle value when you sort the values.

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndf.median<class_ndf_method_median>` or :ref:`ndi.median<class_ndi_method_median>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_min:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **min**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_min>`

Return the minimum of an array or minimum along an axis.

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndf.min<class_ndf_method_min>` or :ref:`ndi.min<class_ndi_method_min>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_minimum:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **minimum**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_minimum>`

Element-wise minimum of array elements.

                Compare two arrays and return a new array containing the element-wise minima. If one of the elements being compared is a NaN, then that element is returned. If both elements are NaNs then the first is returned. The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_moveaxis:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **moveaxis**\ (\ v\: ``Variant``, src\: ``int``, dst\: ``int``\ ) |static| :ref:`🔗<class_nd_method_moveaxis>`

Move axes of an array to new positions.

Other axes remain in their original order.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_multiply:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **multiply**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_multiply>`

Multiply arguments element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_negative:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **negative**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_negative>`

Returns the negative value of the number.

For unsigned types, returns ``MAX - value``.

For non-number types, generates an error.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_newaxis:

.. rst-class:: classref-method

``StringName`` **newaxis**\ (\ ) |static| :ref:`🔗<class_nd_method_newaxis>`

An alias for the StringName &"newaxis". In a subscript, this will add a dimension of size one.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_norm:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **norm**\ (\ a\: ``Variant``, ord\: ``Variant`` = 2, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_norm>`

Vector norm.

This function is able to return one of 4 different vector norms, depending on the value of the ord parameter (L0, L1, L2 and LInf).

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndf.norm<class_ndf_method_norm>` or :ref:`ndi.norm<class_ndi_method_norm>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_not_equal:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **not_equal**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_not_equal>`

Return (x1 != x2) element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_ones:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **ones**\ (\ shape\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) |static| :ref:`🔗<class_nd_method_ones>`

Return a new array of given shape and type, filled with ones.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_ones_like:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **ones_like**\ (\ model\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13, shape\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_ones_like>`

Return a new array of ones with the same shape and type as a given array.

DType and shape will, if supplied, override the values inferred from the given array.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_pad:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **pad**\ (\ v\: ``Variant``, pad_width\: ``Variant``, pad_mode\: :ref:`PadMode<enum_nd_PadMode>` = 0, pad_value\: ``Variant`` = 0\ ) |static| :ref:`🔗<class_nd_method_pad>`

Pad an array.

\ ``pad_width`` can be one of the following:

1. number, shortcut for ``[number, number]``.

2. ``[before, after]``, pads all axes equally.

3. ``[[before_0, after_0], [before_1, after_1], ...]``, pads axes in order.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_positive:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **positive**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_positive>`

For number types, returns a copy of the array.

For non-number types, generates an error.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_pow:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **pow**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_pow>`

First array elements raised to powers from second array, element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_prod:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **prod**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_prod>`

Return the product of array elements over a given axis.

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndf.prod<class_ndf_method_prod>` or :ref:`ndi.prod<class_ndi_method_prod>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_rad2deg:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **rad2deg**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_rad2deg>`

Convert angles from radians to degrees.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_range:

.. rst-class:: classref-method

``Vector4i`` **range**\ (\ start_or_stop\: ``Variant``, stop\: ``Variant`` = &"no_value", step\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_range>`

Create a range. arange can be called with a varying number of positional arguments:

arange(stop): Values are generated within the half-open interval \[0, stop) (in other words, the interval including start but excluding stop).

arange(start, stop): Values are generated within the half-open interval \[start, stop).

arange(start, stop, step) Values are generated within the half-open interval \[start, stop), with spacing between values given by step.

Note that ranges are represented as Vector4i(mask, start, stop, step).

.. rst-class:: classref-item-separator

----

.. _class_nd_method_real:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **real**\ (\ v\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_real>`

Return the real part of the complex argument.

If the argument is not complex, returns the argument.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_reduce_dot:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **sum_product**\ (\ a\: ``Variant``, b\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_reduce_dot>`

Dot product of two arrays along the given axes.

Equivalent to ``nd.sum(nd.multiply(a, b), axes)``.

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndf.sum_product<class_ndf_method_reduce_dot>` or :ref:`ndi.sum_product<class_ndi_method_reduce_dot>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_remainder:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **remainder**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_remainder>`

Returns the element-wise remainder of division.

Computes the remainder complementary to the floor_divide function. It is equivalent to the modulus operator x1 % x2 and has the same sign as the divisor x2.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_reshape:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **reshape**\ (\ a\: ``Variant``, shape\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_reshape>`

Gives a new shape to an array without changing its data.

Up to one element in the new shape can be -1 to infer its size.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_rint:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **rint**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_rint>`

Round elements of the array to the nearest integer.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_round:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **round**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_round>`

Round elements of the array to the nearest integer.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_sign:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **sign**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_sign>`

Returns an element-wise indication of the sign of a number.

The sign function returns -1 if x < 0, 0 if x==0, 1 if x > 0. nan is returned for nan inputs.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_sin:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **sin**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_sin>`

Trigonometric sine, element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_sinh:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **sinh**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_sinh>`

Hyperbolic sine, element-wise.

Equivalent to 0.5 \* (nd.exp(x) - nd.exp(-x)).

.. rst-class:: classref-item-separator

----

.. _class_nd_method_size_of_dtype_in_bytes:

.. rst-class:: classref-method

``int`` **size_of_dtype_in_bytes**\ (\ dtype\: :ref:`DType<enum_nd_DType>`\ ) |static| :ref:`🔗<class_nd_method_size_of_dtype_in_bytes>`

Size of a single element of an array using the dtype.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_sliding_window_view:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **sliding_window_view**\ (\ array\: ``Variant``, window_shape\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_sliding_window_view>`

Create a sliding window view into the array with the given window shape.

Also known as rolling or moving window, the window slides across all dimensions of the array and extracts subsets of the array at all window positions.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_split:

.. rst-class:: classref-method

:ref:`Array<class_Array>`\[:ref:`NDArray<class_NDArray>`\] **split**\ (\ v\: ``Variant``, indices_or_section_size\: ``Variant``, axis\: ``int`` = 0\ ) |static| :ref:`🔗<class_nd_method_split>`

Split an array into multiple sub-arrays as views into v.

This can be regarded as the opposite of :ref:`concatenate<class_nd_method_concatenate>`.

\ ``indices_or_section_size`` must be either:

An integer that the array can be evenly divided into.

A list of sorted indices to split the array at.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_sqrt:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **sqrt**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_sqrt>`

Return the non-negative square-root of an array, element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_square:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **square**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_square>`

Return the element-wise square of the input.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_stack:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **stack**\ (\ v\: ``Variant``, axis\: ``int`` = 0\ ) |static| :ref:`🔗<class_nd_method_stack>`

Join a sequence of arrays along a new axis.

The axis parameter specifies the index of the new axis in the dimensions of the result. For example, if axis=0 it will be the first dimension and if axis=-1 it will be the last dimension.

Equivalent to ``nd.moveaxis(nd.array(v), 0, axis)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_std:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **std**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_std>`

Compute the standard deviation along the specified axis.

Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndf.std<class_ndf_method_std>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_subtract:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **subtract**\ (\ a\: ``Variant``, b\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_subtract>`

Subtract arguments, element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_sum:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **sum**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_sum>`

Sum of array elements over a given axis.

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndf.sum<class_ndf_method_sum>` or :ref:`ndi.sum<class_ndi_method_sum>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_swapaxes:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **swapaxes**\ (\ v\: ``Variant``, a\: ``int``, b\: ``int``\ ) |static| :ref:`🔗<class_nd_method_swapaxes>`

Interchange two axes of an array.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_tan:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **tan**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_tan>`

Compute tangent element-wise.

Equivalent to nd.sin(x) / nd.cos(x) element-wise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_tanh:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **tanh**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_tanh>`

Compute hyperbolic tangent element-wise.

Equivalent to nd.sinh(x) / nd.cosh(x).

.. rst-class:: classref-item-separator

----

.. _class_nd_method_tile:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **tile**\ (\ v\: ``Variant``, reps\: ``Variant``, inner\: ``bool`` = false\ ) |static| :ref:`🔗<class_nd_method_tile>`

Construct an array by repeating v the number of times given by reps.

If reps has length d, the result will have dimension of max(d, v.ndim).

The repetitions will be applied from the innermost dimensions outwards.

If v.ndim > d, the outermost dimensions will remain unchanged.

If v.ndim < d, the array is broadcast with leading new axes.

When ``inner``\ =true, elements will repeat individually rather than element groups repeating.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_to:

.. rst-class:: classref-method

``Vector4i`` **to**\ (\ stop\: ``int``\ ) |static| :ref:`🔗<class_nd_method_to>`

Create a range that starts at 0, and stops at the given index (exclusive).

.. rst-class:: classref-item-separator

----

.. _class_nd_method_trace:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **trace**\ (\ v\: ``Variant``, offset\: ``int`` = 0, axis1\: ``int`` = 0, axis2\: ``int`` = 1\ ) |static| :ref:`🔗<class_nd_method_trace>`

Return the sum of the k-th diagonal of a matrix.

The shape of the result will be the same as ``v``, but with the two given axes removed.

Returns a 0-dimension scalar if ``v`` is 2-D. In that case, consider :ref:`ndi.trace<class_ndi_method_trace>` and :ref:`ndf.trace<class_ndf_method_trace>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_transpose:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **transpose**\ (\ a\: ``Variant``, permutation\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_transpose>`

Returns an array with axes transposed.

If ``permutation`` is not given, reverses the order of the axes.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_trunc:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **trunc**\ (\ a\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_trunc>`

Return the truncated value of the input, element-wise.

The truncated value of the scalar x is the nearest integer i which is closer to zero than x is. In short, the fractional part of the signed number x is discarded.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_uint8:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **uint8**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_uint8>`

Convert to a uint8 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.UInt8)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_uint16:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **uint16**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_uint16>`

Convert to a uint16 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.UInt16)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_uint32:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **uint32**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_uint32>`

Convert to a uint32 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.UInt32)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_uint64:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **uint64**\ (\ array\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_uint64>`

Convert to a uint64 dtype tensor.

Equivalent to ``nd.as_array(array, nd.DType.UInt64)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_unstack:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **unstack**\ (\ v\: ``Variant``, axis\: ``int`` = 0\ ) |static| :ref:`🔗<class_nd_method_unstack>`

Unpacks the given dimension of a rank-R tensor into a sequence of R-1 tensors. Opposite of :ref:`stack<class_nd_method_stack>`.

Equivalent to ``nd.moveaxis(array, axis, 0)``.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_var:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **var**\ (\ a\: ``Variant``, axes\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_var>`

Compute the variance along the specified axis.

Returns the variance of the array elements, a measure of the spread of a distribution. The variance is computed for the flattened array by default, otherwise over the specified axis.

Returns a 0-dimension scalar if axes is null. In that case, consider :ref:`ndf.var<class_ndf_method_var>`.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_vector_as_complex:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **vector_as_complex**\ (\ v\: ``Variant``, keepdims\: ``bool`` = false, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static| :ref:`🔗<class_nd_method_vector_as_complex>`

Reinterprets a real valued array with ``shape[-1] == 2`` as a complex valued array.

If ``keepdims`` is false (default), the last dimension will be consumed. Otherwise, it will be 1.

This function will return a view if possible, but create a new array otherwise.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_vsplit:

.. rst-class:: classref-method

:ref:`Array<class_Array>`\[:ref:`NDArray<class_NDArray>`\] **vsplit**\ (\ v\: ``Variant``, indices_or_section_size\: ``Variant``\ ) |static| :ref:`🔗<class_nd_method_vsplit>`

Split an array into multiple sub-arrays vertically (row-wise).

Please refer to :ref:`split<class_nd_method_split>`. vsplit is equivalent to split with axis=0 (default), the array is always split along the first axis regardless of the array dimension.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_vstack:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **vstack**\ (\ v\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13\ ) |static| :ref:`🔗<class_nd_method_vstack>`

Stack arrays in sequence vertically (row wise).

This is equivalent to concatenation along the first axis after 1-D arrays of shape (N,) have been reshaped to (1,N). Rebuilds arrays divided by vsplit.

This function makes most sense for arrays with up to 3 dimensions. For instance, for pixel-data with a height (first axis), width (second axis), and r/g/b channels (third axis). The functions concatenate, stack and block provide more general stacking and concatenation operations.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_zeros:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **zeros**\ (\ shape\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) |static| :ref:`🔗<class_nd_method_zeros>`

Return a new array of given shape and type, filled with zeros.

.. rst-class:: classref-item-separator

----

.. _class_nd_method_zeros_like:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **zeros_like**\ (\ model\: ``Variant``, dtype\: :ref:`DType<enum_nd_DType>` = 13, shape\: ``Variant`` = null\ ) |static| :ref:`🔗<class_nd_method_zeros_like>`

Return a new array of ones with the same shape and type as a given array.

DType and shape will, if supplied, override the values inferred from the given array.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
